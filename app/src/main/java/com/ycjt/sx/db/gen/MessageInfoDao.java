package com.ycjt.sx.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ycjt.sx.erp.message.bean.MessageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_INFO".
*/
public class MessageInfoDao extends AbstractDao<MessageInfo, Void> {

    public static final String TABLENAME = "MESSAGE_INFO";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, int.class, "type", false, "TYPE");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Filepath = new Property(2, String.class, "filepath", false, "FILEPATH");
        public final static Property SendState = new Property(3, int.class, "sendState", false, "SEND_STATE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Header = new Property(5, String.class, "header", false, "HEADER");
        public final static Property ImageUrl = new Property(6, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property VoiceTime = new Property(7, long.class, "voiceTime", false, "VOICE_TIME");
        public final static Property MsgId = new Property(8, String.class, "msgId", false, "MSG_ID");
    }


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_INFO\" (" + //
                "\"TYPE\" INTEGER NOT NULL ," + // 0: type
                "\"CONTENT\" TEXT," + // 1: content
                "\"FILEPATH\" TEXT," + // 2: filepath
                "\"SEND_STATE\" INTEGER NOT NULL ," + // 3: sendState
                "\"TIME\" TEXT," + // 4: time
                "\"HEADER\" TEXT," + // 5: header
                "\"IMAGE_URL\" TEXT," + // 6: imageUrl
                "\"VOICE_TIME\" INTEGER NOT NULL ," + // 7: voiceTime
                "\"MSG_ID\" TEXT);"); // 8: msgId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(3, filepath);
        }
        stmt.bindLong(4, entity.getSendState());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(6, header);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
        stmt.bindLong(8, entity.getVoiceTime());
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(9, msgId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(3, filepath);
        }
        stmt.bindLong(4, entity.getSendState());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(6, header);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
        stmt.bindLong(8, entity.getVoiceTime());
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(9, msgId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
            cursor.getInt(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filepath
            cursor.getInt(offset + 3), // sendState
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // header
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl
            cursor.getLong(offset + 7), // voiceTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // msgId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setType(cursor.getInt(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilepath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendState(cursor.getInt(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeader(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVoiceTime(cursor.getLong(offset + 7));
        entity.setMsgId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MessageInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MessageInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(MessageInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
